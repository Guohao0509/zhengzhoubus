angular.module("ui.calendar",[]).constant("uiCalendarConfig",{calendars:{}}).controller("uiCalendarCtrl",["$scope","$timeout","$locale",function($scope,$timeout,$locale){var sourceSerialId=1,eventSerialId=1,sources=$scope.eventSources,extraEventSignature=$scope.calendarWatchEvent?$scope.calendarWatchEvent:angular.noop,wrapFunctionWithScopeApply=function(functionToWrap){var wrapper;return functionToWrap&&(wrapper=function(){var args=arguments,_this=this;$timeout(function(){functionToWrap.apply(_this,args)})}),wrapper};this.eventsFingerprint=function(e){return e._id||(e._id=eventSerialId++),""+e._id+(e.id||"")+(e.title||"")+(e.url||"")+(+e.start||"")+(+e.end||"")+(e.allDay||"")+(e.className||"")+extraEventSignature(e)||""},this.sourcesFingerprint=function(source){return source.__id||(source.__id=sourceSerialId++)},this.allEvents=function(){for(var arraySources=[],i=0,srcLen=sources.length;srcLen>i;i++){var source=sources[i];if(angular.isArray(source))arraySources.push(source);else if(angular.isObject(source)&&angular.isArray(source.events)){var extEvent={};for(var key in source)"_uiCalId"!==key&&"events"!==key&&(extEvent[key]=source[key]);for(var eI=0;eI<source.events.length;eI++)angular.extend(source.events[eI],extEvent);arraySources.push(source.events)}}return Array.prototype.concat.apply([],arraySources)},this.changeWatcher=function(arraySource,tokenFn){var self,getTokens=function(){for(var token,el,array=angular.isFunction(arraySource)?arraySource():arraySource,result=[],i=0,n=array.length;n>i;i++)el=array[i],token=tokenFn(el),map[token]=el,result.push(token);return result},subtractAsSets=function(a,b){var i,n,result=[],inB={};for(i=0,n=b.length;n>i;i++)inB[b[i]]=!0;for(i=0,n=a.length;n>i;i++)inB[a[i]]||result.push(a[i]);return result},map={},applyChanges=function(newTokens,oldTokens){var i,n,el,token,replacedTokens={},removedTokens=subtractAsSets(oldTokens,newTokens);for(i=0,n=removedTokens.length;n>i;i++){var removedToken=removedTokens[i];el=map[removedToken],delete map[removedToken];var newToken=tokenFn(el);newToken===removedToken?self.onRemoved(el):(replacedTokens[newToken]=removedToken,self.onChanged(el))}var addedTokens=subtractAsSets(newTokens,oldTokens);for(i=0,n=addedTokens.length;n>i;i++)token=addedTokens[i],el=map[token],replacedTokens[token]||self.onAdded(el)};return self={subscribe:function(scope,onChanged){scope.$watch(getTokens,function(newTokens,oldTokens){onChanged&&onChanged(newTokens,oldTokens)===!1||applyChanges(newTokens,oldTokens)},!0)},onAdded:angular.noop,onChanged:angular.noop,onRemoved:angular.noop}},this.getFullCalendarConfig=function(calendarSettings,uiCalendarConfig){var config={};return angular.extend(config,uiCalendarConfig),angular.extend(config,calendarSettings),angular.forEach(config,function(value,key){"function"==typeof value&&(config[key]=wrapFunctionWithScopeApply(config[key]))}),config},this.getLocaleConfig=function(fullCalendarConfig){if(!fullCalendarConfig.lang||fullCalendarConfig.useNgLocale){var tValues=function(data){var r,k;r=[];for(k in data)r[k]=data[k];return r},dtf=$locale.DATETIME_FORMATS;return{monthNames:tValues(dtf.MONTH),monthNamesShort:tValues(dtf.SHORTMONTH),dayNames:tValues(dtf.DAY),dayNamesShort:tValues(dtf.SHORTDAY)}}return{}}}]).directive("uiCalendar",["uiCalendarConfig",function(uiCalendarConfig){return{restrict:"A",scope:{eventSources:"=ngModel",calendarWatchEvent:"&"},controller:"uiCalendarCtrl",link:function(scope,elm,attrs,controller){function getOptions(){var fullCalendarConfig,calendarSettings=attrs.uiCalendar?scope.$parent.$eval(attrs.uiCalendar):{};fullCalendarConfig=controller.getFullCalendarConfig(calendarSettings,uiCalendarConfig);var localeFullCalendarConfig=controller.getLocaleConfig(fullCalendarConfig);angular.extend(localeFullCalendarConfig,fullCalendarConfig),options={eventSources:sources},angular.extend(options,localeFullCalendarConfig),options.calendars=null;var options2={};for(var o in options)"eventSources"!==o&&(options2[o]=options[o]);return JSON.stringify(options2)}var calendar,sources=scope.eventSources,sourcesChanged=!1,eventSourcesWatcher=controller.changeWatcher(sources,controller.sourcesFingerprint),eventsWatcher=controller.changeWatcher(controller.allEvents,controller.eventsFingerprint),options=null;scope.destroy=function(){calendar&&calendar.fullCalendar&&calendar.fullCalendar("destroy"),calendar=attrs.calendar?uiCalendarConfig.calendars[attrs.calendar]=$(elm).html(""):$(elm).html("")},scope.init=function(){calendar.fullCalendar(options)},eventSourcesWatcher.onAdded=function(source){calendar.fullCalendar("addEventSource",source),sourcesChanged=!0},eventSourcesWatcher.onRemoved=function(source){calendar.fullCalendar("removeEventSource",source),sourcesChanged=!0},eventsWatcher.onAdded=function(event){calendar.fullCalendar("renderEvent",event)},eventsWatcher.onRemoved=function(event){calendar.fullCalendar("removeEvents",function(e){return e._id===event._id})},eventsWatcher.onChanged=function(event){event._start=$.fullCalendar.moment(event.start),event._end=$.fullCalendar.moment(event.end),calendar.fullCalendar("updateEvent",event)},eventSourcesWatcher.subscribe(scope),eventsWatcher.subscribe(scope,function(){return sourcesChanged===!0?(sourcesChanged=!1,!1):void 0}),scope.$watch(getOptions,function(){scope.destroy(),scope.init()})}}}]);